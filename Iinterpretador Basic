#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_VARIAVEIS 100

typedef struct {
    char nome[50];
    int valor;
} Variavel;

Variavel variaveis[MAX_VARIAVEIS];
int numVariaveis = 0;

void trim(char *str) {
    char *end;
    while (isspace((unsigned char)*str)) str++;
    if (*str == 0) return;
    end = str + strlen(str) - 1;
    while (end > str && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
}

void definirValorVariavel(const char *nome, int valor) {
    for (int i = 0; i < numVariaveis; i++) {
        if (strcmp(variaveis[i].nome, nome) == 0) {
            variaveis[i].valor = valor;
            return;
        }
    }
    if (numVariaveis < MAX_VARIAVEIS) {
        strcpy(variaveis[numVariaveis].nome, nome);
        variaveis[numVariaveis].valor = valor;
        numVariaveis++;
    }
}

int obterValorVariavel(const char *nome) {
    for (int i = 0; i < numVariaveis; i++) {
        if (strcmp(variaveis[i].nome, nome) == 0) {
            return variaveis[i].valor;
        }
    }
    return 0; 
}

int avaliarExpressao(const char *expr) {
    // Avaliar expressões simples, como var + var ou num + var
    char var1[50];
    char var2[50];
    char operador;
    
    sscanf(expr, "%s %c %s", var1, &operador, var2);

    int valor1, valor2;
    
    // Obtém os valores das variáveis ou converte números
    if (isdigit(var1[0])) {
        valor1 = atoi(var1);
    } else {
        valor1 = obterValorVariavel(var1);
    }
    
    if (isdigit(var2[0])) {
        valor2 = atoi(var2);
    } else {
        valor2 = obterValorVariavel(var2);
    }

    // Realiza a operação com base no operador
    switch (operador) {
        case '+':
            return valor1 + valor2;
        case '-':
            return valor1 - valor2;
        case '*':
            return valor1 * valor2;
        case '/':
            return valor1 / valor2;
        default:
            return 0; // Se o operador não for válido
    }
}

void executarBASIC(FILE *arquivo) {
    char linha[256];

    while (fgets(linha, sizeof(linha), arquivo)) {
        linha[strcspn(linha, "\n")] = 0;
        char *comando = linha;

        while (*comando && (isdigit(*comando) || *comando == ' ')) {
            comando++;
        }
        while (*comando == ' ') {
            comando++;
        }
        
        trim(comando);

        if (strncmp(comando, "REM", 3) == 0) {
            printf("Comentário: %s\n", comando + 4);
            continue;
        }

        if (strncmp(comando, "PRINT", 5) == 0) {
            char *parametro = comando + 6;
            trim(parametro);

            if (isdigit(parametro[0]) || (parametro[0] == '"' && parametro[strlen(parametro) - 1] == '"')) {
                if (parametro[0] == '"') {
                    parametro[strlen(parametro) - 1] = 0;
                    printf("%s\n", parametro + 1);
                } else {
                    printf("%s\n", parametro);
                }
            } else {
                int valorVar = obterValorVariavel(parametro);
                printf("%d\n", valorVar);
            }
        } 
        else if (strncmp(comando, "INPUT", 5) == 0) {
            char variavel[50];
            sscanf(comando + 6, "%s", variavel);
            trim(variavel);
            printf("Digite um valor para %s: ", variavel);
            int valor;
            scanf("%d", &valor);
            definirValorVariavel(variavel, valor);
            printf("Você digitou %d para %s.\n", valor, variavel);
        } 
        else if (strchr(comando, '=')) {
            char var[50], expr[100];
            char *pos = strchr(comando, '=');
            if (pos != NULL) {
                strncpy(var, comando, pos - comando);
                var[pos - comando] = '\0';
                trim(var);
                
                strcpy(expr, pos + 1);
                trim(expr);
                
                int resultado = avaliarExpressao(expr);
                definirValorVariavel(var, resultado);
                printf("Atribuindo %s = %d\n", var, resultado);
            }
        } 
        else if (strncmp(comando, "HALT", 4) == 0) {
            printf("Execução interrompida pelo comando HALT.\n");
            printf("Fim da execução.\n");
            break;
        }
    }
}
int main() {
    char nomeArquivo[100];

    // Solicita o nome do arquivo ao usuário
    printf("Digite o nome do arquivo (com extensão .txt): ");
    scanf("%s", nomeArquivo);

    // Abre o arquivo em modo de leitura
    FILE *arquivo = fopen(nomeArquivo, "r");
    if (arquivo == NULL) {
        fprintf(stderr, "Erro ao abrir o arquivo '%s'. Verifique se o arquivo existe e tente novamente.\n", nomeArquivo);
        return 1;
    }

    // Executa o interpretador BASIC
    executarBASIC(arquivo);
    fclose(arquivo);
    
    return 0;
}
